
Code 3.5 Permutation Inference Test Model Script

import pandas as pd
import numpy as np
import statsmodels.api as sm

# read in data from the excel sheet
data = pd.read_excel(r'/Excel/File/Location')

# create a binary variable indicating post-treatment
data['post'] = (data['time'] == 'post').astype(int)

# create binary variables for the treatment groups
group_dummies = pd.get_dummies(data['group'])
data = pd.concat([data, group_dummies], axis=1)

# specify the dependent variable and independent variables
y = data['Variable1']
X = data[['post', 'GroupB', 'GroupC', 'GroupD', 'GroupE',
 'covariate1', 'covariate2', 'covariate3', 'covariate4', 
'covariate5',
 'covariate6', 'covariate7', 'covariate8']]

# fit the linear regression model
model = sm.OLS(y, X).fit()

# Obtain the coefficient estimates and p-values from the initial model
initial_coefficients = model.params
initial_pvalues = model.pvalues

# Perform permutation-based inference
num_permutations = 10000 # Number of permutations (adjust as needed)
permuted_pvalues = []
np.random.seed(0) # Set a seed for reproducibility
for _ in range(num_permutations):

# Permute the treatment variable
 permuted_X = X.copy()
 permuted_X['post'] = np.random.permutation(permuted_X['post'])

# Fit the permuted model and obtain p-values
 permuted_model = sm.OLS(y, permuted_X).fit()
 permuted_pvalues.append(permuted_model.pvalues)

# Compute the robustness check for coefficients and p-values
robustness_check = []
simulated_pvalues = []
for i in range(len(X.columns)):
 initial_pvalue = initial_pvalues[i]
 permuted_pvals = [pvalues[i] for pvalues in permuted_pvalues]
 robustness = (initial_pvalue >= np.array(permuted_pvals)).mean()
 robustness_check.append(robustness)
 simulated_pvalue_freq = (np.array(permuted_pvals) < 0.05).mean()
 simulated_pvalues.append(simulated_pvalue_freq)

# Print the summary of the regression results, simulated p-values, and the 
robustness check
print(model.summary())
print("Robustness Check:")
for i in range(len(X.columns)):
 print(
 f"Variable: {X.columns[i]}, Robustness: {robustness_check[i]}, 
Simulated P-value < 0.05 Frequency: {simulated_pvalues[i]}")
